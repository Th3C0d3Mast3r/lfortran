; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info = private unnamed_addr constant [3 x i8] c"I8\00", align 1
@1 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@2 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@4 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@serialization_info.1 = private unnamed_addr constant [3 x i8] c"R8\00", align 1
@6 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@7 = private unnamed_addr constant [11 x i8] c"ERROR STOP\00", align 1
@8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@9 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1

define double @_lcompilers_abs_f64(double* %x) {
.entry:
  %_lcompilers_abs_f64 = alloca double, align 8
  %0 = load double, double* %x, align 8
  %1 = fcmp oge double %0, 0.000000e+00
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load double, double* %x, align 8
  store double %2, double* %_lcompilers_abs_f64, align 8
  br label %ifcont

else:                                             ; preds = %.entry
  %3 = load double, double* %x, align 8
  %4 = fneg double %3
  store double %4, double* %_lcompilers_abs_f64, align 8
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %return

return:                                           ; preds = %ifcont
  %5 = load double, double* %_lcompilers_abs_f64, align 8
  ret double %5
}

define i32 @main(i32 %0, i8** %1) {
.entry:
  %call_arg_value = alloca double, align 8
  %x = alloca i64, align 8
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  %x1 = alloca i64, align 8
  %y = alloca double, align 8
  store i64 665663010, i64* %x1, align 4
  %2 = load i64, i64* %x1, align 4
  %3 = sitofp i64 %2 to double
  %4 = call double @llvm.powi.f64(double %3, i32 2)
  %5 = fptosi double %4 to i64
  store i64 %5, i64* %x1, align 4
  %6 = call i8* (i8*, i8*, i32, ...) @_lcompilers_string_format_fortran(i8* null, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info, i32 0, i32 0), i32 0, i64* %x1)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @1, i32 0, i32 0), i8* %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0))
  %7 = load i64, i64* %x1, align 4
  %8 = icmp ne i64 %7, 443107242882260100
  br i1 %8, label %then, label %else

then:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @2, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  store double 0x41C3D69B11000000, double* %y, align 8
  %9 = load double, double* %y, align 8
  %10 = call double @llvm.powi.f64(double %9, i32 2)
  store double %10, double* %y, align 8
  %11 = call i8* (i8*, i8*, i32, ...) @_lcompilers_string_format_fortran(i8* null, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @serialization_info.1, i32 0, i32 0), i32 0, double* %y)
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @6, i32 0, i32 0), i8* %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @5, i32 0, i32 0))
  %12 = load double, double* %y, align 8
  %13 = fsub double %12, 0x439898EEC2459972
  store double %13, double* %call_arg_value, align 8
  %14 = call double @_lcompilers_abs_f64(double* %call_arg_value)
  %15 = fcmp ogt double %14, 0x3BFD83C940000000
  br i1 %15, label %then2, label %else3

then2:                                            ; preds = %ifcont
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @9, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @7, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @8, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont4

else3:                                            ; preds = %ifcont
  br label %ifcont4

ifcont4:                                          ; preds = %else3, %then2
  call void @_lpython_free_argv()
  br label %return

return:                                           ; preds = %ifcont4
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.powi.f64(double, i32) #0

declare i8* @_lcompilers_string_format_fortran(i8*, i8*, i32, ...)

declare void @_lfortran_printf(i8*, ...)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

declare void @_lpython_free_argv()

attributes #0 = { nounwind readnone speculatable willreturn }
